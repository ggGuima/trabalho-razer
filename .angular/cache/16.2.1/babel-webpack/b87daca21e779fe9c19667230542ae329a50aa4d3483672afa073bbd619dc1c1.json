{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/login.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(loginService, router) {\n    this.loginService = loginService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const usuarioLogado = this.loginService.usuarioLogado;\n    const url = state.url;\n    if (usuarioLogado) {\n      if (route.data?.['role'] && route.data?.['role'].indexOf(usuarioLogado.perfil) === -1) {\n        // Se o perfil do usuário não está no perfil da rota\n        // vai para login\n        this.router.navigate(['/login'], {\n          queryParams: {\n            error: \"Proibido o acesso a \" + url\n          }\n        });\n        return false;\n      }\n      // em qualquer outro caso, permite o acesso\n      return true;\n    }\n    // Se não está logado, vai para login\n    this.router.navigate(['/login'], {\n      queryParams: {\n        error: \"Deve fazer o login antes de acessar \" + url\n      }\n    });\n    return false;\n  }\n}\n_class = AuthGuard;\n_class.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.LoginService), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthGuard","constructor","loginService","router","canActivate","route","state","usuarioLogado","url","data","indexOf","perfil","navigate","queryParams","error","i0","ɵɵinject","i1","LoginService","i2","Router","factory","ɵfac","providedIn"],"sources":["/home/requisitos/Acacia/pessoais/estudos/raizer-angular/crud-trabalhoentregar/trabalho-razer/src/app/auth/auth.guard.ts"],"sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { LoginService } from './services/login.service';\n\n\n\n\n@Injectable({\nprovidedIn: 'root'\n})\n\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private loginService: LoginService,\n    private router: Router\n  ) { }\n\ncanActivate(\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot): Observable<boolean | UrlTree> |   Promise<boolean | UrlTree> | boolean | UrlTree {\n    const usuarioLogado = this.loginService.usuarioLogado;\n    const url = state.url;\n\n    if (usuarioLogado) {\n      if (route.data?.['role'] && route.data?.['role'].indexOf(usuarioLogado.perfil) === -1) {\n        // Se o perfil do usuário não está no perfil da rota\n        // vai para login\n        this.router.navigate(['/login'], { queryParams: { error: \"Proibido o acesso a \" + url } });\n        return false;\n      }\n      // em qualquer outro caso, permite o acesso\n  return true;\n}\n\n    // Se não está logado, vai para login\n    this.router.navigate(['/login'], { queryParams: { error: \"Deve fazer o login antes de acessar \" + url } });\n    return false;\n  }\n}\n"],"mappings":";;;;AAaA,OAAM,MAAOA,SAAS;EAEpBC,YACUC,YAA0B,EAC1BC,MAAc;IADd,KAAAD,YAAY,GAAZA,YAAY;IACZ,KAAAC,MAAM,GAANA,MAAM;EACZ;EAENC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IACxB,MAAMC,aAAa,GAAG,IAAI,CAACL,YAAY,CAACK,aAAa;IACrD,MAAMC,GAAG,GAAGF,KAAK,CAACE,GAAG;IAErB,IAAID,aAAa,EAAE;MACjB,IAAIF,KAAK,CAACI,IAAI,GAAG,MAAM,CAAC,IAAIJ,KAAK,CAACI,IAAI,GAAG,MAAM,CAAC,CAACC,OAAO,CAACH,aAAa,CAACI,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;QACrF;QACA;QACA,IAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;UAAEC,WAAW,EAAE;YAAEC,KAAK,EAAE,sBAAsB,GAAGN;UAAG;QAAE,CAAE,CAAC;QAC1F,OAAO,KAAK;;MAEd;MACJ,OAAO,IAAI;;IAGT;IACA,IAAI,CAACL,MAAM,CAACS,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;MAAEC,WAAW,EAAE;QAAEC,KAAK,EAAE,sCAAsC,GAAGN;MAAG;IAAE,CAAE,CAAC;IAC1G,OAAO,KAAK;EACd;;SA3BWR,SAAS;;mBAATA,MAAS,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAATpB,MAAS;EAAAqB,OAAA,EAATrB,MAAS,CAAAsB,IAAA;EAAAC,UAAA,EAHV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}