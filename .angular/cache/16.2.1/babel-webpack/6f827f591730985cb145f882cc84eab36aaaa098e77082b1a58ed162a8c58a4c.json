{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nconst LS_CHAVE = \"clientes\";\nexport class ClienteService {\n  constructor() {}\n  listarTodos() {\n    const clientes = localStorage[LS_CHAVE];\n    return clientes ? JSON.parse(clientes) : [];\n  }\n  inserir(cliente) {\n    const clientes = this.listarTodos();\n    cliente.id = new Date().getTime();\n    clientes.push(cliente);\n    localStorage[LS_CHAVE] = JSON.stringify(clientes);\n  }\n  buscarPorId(id) {\n    const clientes = this.listarTodos();\n    return clientes.find(cliente => cliente.id === id);\n  }\n  atualizar(cliente) {\n    const clientes = this.listarTodos();\n    clientes.forEach((obj, index, objs) => {\n      if (cliente.id === obj.id) {\n        objs[index] = cliente;\n      }\n    });\n    localStorage[LS_CHAVE] = JSON.stringify(clientes);\n  }\n  remover(id) {\n    let clientes = this.listarTodos();\n    clientes = clientes.filter(cliente => cliente.id !== id);\n    localStorage[LS_CHAVE] = JSON.stringify(clientes);\n  }\n}\n_class = ClienteService;\n_class.ɵfac = function ClienteService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["LS_CHAVE","ClienteService","constructor","listarTodos","clientes","localStorage","JSON","parse","inserir","cliente","id","Date","getTime","push","stringify","buscarPorId","find","atualizar","forEach","obj","index","objs","remover","filter","factory","ɵfac","providedIn"],"sources":["/home/requisitos/Acacia/pessoais/estudos/raizer-angular/crud-trabalhoentregar/trabalho-razer/src/app/cliente/service/cliente.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cliente } from 'src/app/shared/models/cliente.model';\n\nconst LS_CHAVE: string = \"clientes\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClienteService {\n\n  constructor() { }\n\n  listarTodos(): Cliente[] {\n    const clientes = localStorage[LS_CHAVE];\n    return clientes ? JSON.parse(clientes) : [];\n  }\n\n  inserir(cliente: Cliente): void {\n    const clientes = this.listarTodos();\n    cliente.id = new Date().getTime();\n    clientes.push(cliente);\n    localStorage[LS_CHAVE] = JSON.stringify(clientes);\n  }\n\n  buscarPorId(id: number): Cliente | undefined {\n    const clientes: Cliente[] = this.listarTodos();\n    return clientes.find(cliente => cliente.id === id);\n  }\n\n  atualizar(cliente: Cliente): void {\n    const clientes: Cliente[] = this.listarTodos();\n    clientes.forEach((obj, index, objs) => {\n      if(cliente.id === obj.id) {\n        objs[index] = cliente\n      }\n    });\n\n    localStorage[LS_CHAVE] = JSON.stringify(clientes);\n  }\n\n  remover(id:number): void {\n    let clientes: Cliente[] = this.listarTodos();\n    clientes = clientes.filter(cliente => cliente.id !== id);\n    localStorage[LS_CHAVE] = JSON.stringify(clientes);\n  }\n}\n"],"mappings":";;AAGA,MAAMA,QAAQ,GAAW,UAAU;AAKnC,OAAM,MAAOC,cAAc;EAEzBC,YAAA,GAAgB;EAEhBC,WAAWA,CAAA;IACT,MAAMC,QAAQ,GAAGC,YAAY,CAACL,QAAQ,CAAC;IACvC,OAAOI,QAAQ,GAAGE,IAAI,CAACC,KAAK,CAACH,QAAQ,CAAC,GAAG,EAAE;EAC7C;EAEAI,OAAOA,CAACC,OAAgB;IACtB,MAAML,QAAQ,GAAG,IAAI,CAACD,WAAW,EAAE;IACnCM,OAAO,CAACC,EAAE,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IACjCR,QAAQ,CAACS,IAAI,CAACJ,OAAO,CAAC;IACtBJ,YAAY,CAACL,QAAQ,CAAC,GAAGM,IAAI,CAACQ,SAAS,CAACV,QAAQ,CAAC;EACnD;EAEAW,WAAWA,CAACL,EAAU;IACpB,MAAMN,QAAQ,GAAc,IAAI,CAACD,WAAW,EAAE;IAC9C,OAAOC,QAAQ,CAACY,IAAI,CAACP,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKA,EAAE,CAAC;EACpD;EAEAO,SAASA,CAACR,OAAgB;IACxB,MAAML,QAAQ,GAAc,IAAI,CAACD,WAAW,EAAE;IAC9CC,QAAQ,CAACc,OAAO,CAAC,CAACC,GAAG,EAAEC,KAAK,EAAEC,IAAI,KAAI;MACpC,IAAGZ,OAAO,CAACC,EAAE,KAAKS,GAAG,CAACT,EAAE,EAAE;QACxBW,IAAI,CAACD,KAAK,CAAC,GAAGX,OAAO;;IAEzB,CAAC,CAAC;IAEFJ,YAAY,CAACL,QAAQ,CAAC,GAAGM,IAAI,CAACQ,SAAS,CAACV,QAAQ,CAAC;EACnD;EAEAkB,OAAOA,CAACZ,EAAS;IACf,IAAIN,QAAQ,GAAc,IAAI,CAACD,WAAW,EAAE;IAC5CC,QAAQ,GAAGA,QAAQ,CAACmB,MAAM,CAACd,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKA,EAAE,CAAC;IACxDL,YAAY,CAACL,QAAQ,CAAC,GAAGM,IAAI,CAACQ,SAAS,CAACV,QAAQ,CAAC;EACnD;;SApCWH,cAAc;;mBAAdA,MAAc;AAAA;;SAAdA,MAAc;EAAAuB,OAAA,EAAdvB,MAAc,CAAAwB,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}