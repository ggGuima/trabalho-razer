{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nconst LS_CHAVE = \"pedidos\";\nexport class PedidosService {\n  constructor() {}\n  listarTodos() {\n    const pedidos = localStorage[LS_CHAVE];\n    return pedidos ? JSON.parse(pedidos) : [];\n  }\n  inserir(pedido) {\n    const pedidos = this.listarTodos();\n    pedido.id = new Date().getTime();\n    pedidos.push(pedido);\n    localStorage[LS_CHAVE] = JSON.stringify(pedidos);\n  }\n  buscarPorId(id) {\n    const pedidos = this.listarTodos();\n    return pedidos.find(pedido => pedido.id === id);\n  }\n  atualizar(pedido) {\n    const pedidos = this.listarTodos();\n    pedidos.forEach((obj, index, objs) => {\n      if (pedido.id === obj.id) {\n        objs[index] = pedido;\n      }\n    });\n    localStorage[LS_CHAVE] = JSON.stringify(pedidos);\n  }\n  remover(id) {\n    let pedidos = this.listarTodos();\n    pedidos = pedidos.filter(pedido => pedido.id !== id);\n    localStorage[LS_CHAVE] = JSON.stringify(pedidos);\n  }\n}\n_class = PedidosService;\n_class.ɵfac = function PedidosService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["LS_CHAVE","PedidosService","constructor","listarTodos","pedidos","localStorage","JSON","parse","inserir","pedido","id","Date","getTime","push","stringify","buscarPorId","find","atualizar","forEach","obj","index","objs","remover","filter","factory","ɵfac","providedIn"],"sources":["/home/requisitos/Acacia/pessoais/estudos/raizer-angular/crud-trabalhoentregar/trabalho-razer/src/app/pedidos/service/pedidos.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Pedidos } from 'src/app/shared/models/pedidos.model';\n\n\nconst LS_CHAVE: string = \"pedidos\"\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PedidosService {\n\n  constructor() { }\n\n  listarTodos(): Pedidos[] {\n    const pedidos = localStorage[LS_CHAVE];\n\n    return pedidos ? JSON.parse(pedidos) : []; \n  }\n\n  inserir(pedido: Pedidos): void {\n    const pedidos = this.listarTodos();\n\n    pedido.id = new Date().getTime();\n\n    pedidos.push(pedido)\n\n    localStorage[LS_CHAVE] = JSON.stringify(pedidos);\n  }\n\n  buscarPorId(id: number): Pedidos | undefined {\n    const pedidos: Pedidos[] = this.listarTodos();\n\n    return pedidos.find(pedido => pedido.id === id);\n  }\n\n  atualizar(pedido: Pedidos): void {\n    const pedidos: Pedidos[] = this.listarTodos();\n\n    pedidos.forEach((obj, index, objs) => {\n      if (pedido.id === obj.id) {\n        objs[index] = pedido\n      }\n    });\n\n    localStorage[LS_CHAVE] = JSON.stringify(pedidos);\n  }\n\n  remover(id: number): void {\n    let pedidos: Pedidos[] = this.listarTodos();\n\n    pedidos = pedidos.filter(pedido => pedido.id !== id);\n    localStorage[LS_CHAVE] = JSON.stringify(pedidos);\n  }\n}\n"],"mappings":";;AAIA,MAAMA,QAAQ,GAAW,SAAS;AAKlC,OAAM,MAAOC,cAAc;EAEzBC,YAAA,GAAgB;EAEhBC,WAAWA,CAAA;IACT,MAAMC,OAAO,GAAGC,YAAY,CAACL,QAAQ,CAAC;IAEtC,OAAOI,OAAO,GAAGE,IAAI,CAACC,KAAK,CAACH,OAAO,CAAC,GAAG,EAAE;EAC3C;EAEAI,OAAOA,CAACC,MAAe;IACrB,MAAML,OAAO,GAAG,IAAI,CAACD,WAAW,EAAE;IAElCM,MAAM,CAACC,EAAE,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IAEhCR,OAAO,CAACS,IAAI,CAACJ,MAAM,CAAC;IAEpBJ,YAAY,CAACL,QAAQ,CAAC,GAAGM,IAAI,CAACQ,SAAS,CAACV,OAAO,CAAC;EAClD;EAEAW,WAAWA,CAACL,EAAU;IACpB,MAAMN,OAAO,GAAc,IAAI,CAACD,WAAW,EAAE;IAE7C,OAAOC,OAAO,CAACY,IAAI,CAACP,MAAM,IAAIA,MAAM,CAACC,EAAE,KAAKA,EAAE,CAAC;EACjD;EAEAO,SAASA,CAACR,MAAe;IACvB,MAAML,OAAO,GAAc,IAAI,CAACD,WAAW,EAAE;IAE7CC,OAAO,CAACc,OAAO,CAAC,CAACC,GAAG,EAAEC,KAAK,EAAEC,IAAI,KAAI;MACnC,IAAIZ,MAAM,CAACC,EAAE,KAAKS,GAAG,CAACT,EAAE,EAAE;QACxBW,IAAI,CAACD,KAAK,CAAC,GAAGX,MAAM;;IAExB,CAAC,CAAC;IAEFJ,YAAY,CAACL,QAAQ,CAAC,GAAGM,IAAI,CAACQ,SAAS,CAACV,OAAO,CAAC;EAClD;EAEAkB,OAAOA,CAACZ,EAAU;IAChB,IAAIN,OAAO,GAAc,IAAI,CAACD,WAAW,EAAE;IAE3CC,OAAO,GAAGA,OAAO,CAACmB,MAAM,CAACd,MAAM,IAAIA,MAAM,CAACC,EAAE,KAAKA,EAAE,CAAC;IACpDL,YAAY,CAACL,QAAQ,CAAC,GAAGM,IAAI,CAACQ,SAAS,CAACV,OAAO,CAAC;EAClD;;SA3CWH,cAAc;;mBAAdA,MAAc;AAAA;;SAAdA,MAAc;EAAAuB,OAAA,EAAdvB,MAAc,CAAAwB,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}